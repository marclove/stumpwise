<% 
	no_customizations = theme_customization.if_keys.empty? &&
		 									theme_customization.color_keys.empty? &&
		 									theme_customization.text_keys.empty? &&
		 									theme_customization.image_keys.empty?
%>

<% if no_customizations %>
	<p>The chosen theme has no options.</p>
<% else %>
	<% form_tag '/admin/theme', :method => :put, :multipart => true do %>

		<% for if_key in theme_customization.if_keys %>
			<div class="theme_customization_option">
				<%= hidden_field_tag "theme_customization[ifs][#{if_key}]", 'false' %>
				<%= check_box_tag "theme_customization[ifs][#{if_key}]", 'true', theme_customization.merged_ifs[if_key], :class => 'theme_customization_if' %>
				<label for="theme_customization_ifs_<%= if_key.tr(' ','_') %>"><%= if_key %></label>
			</div>
		<% end %>

		<% for color_key in theme_customization.color_keys %>
			<div class="theme_customization_option">
				<div class="pick_color_key"><%= color_key %></div>
				<%= text_field_tag "theme_customization[colors][#{color_key}]", theme_customization.merged_colors[color_key], :class => 'theme_customization_color pick_color' %>
			</div>
		<% end %>

		<% for text_key in theme_customization.text_keys %>
			<div class="theme_customization_option">
				<label for="theme_customization_texts_<%= text_key.tr(' ','_') %>"><%= text_key %>:</label>
				<%= text_field_tag "theme_customization[texts][#{text_key}]", theme_customization.merged_texts[text_key], :class => 'theme_customization_text' %>
			</div>
		<% end %>

		<% for image_key in theme_customization.image_keys %>
			<div class="theme_customization_option">
				<label for="theme_customization_images_<%= image_key.tr(' ','_') %>"><%= image_key %>:</label>
				<%= file_field_tag "theme_customization_images[#{image_key}]", :class => 'theme_customization_file', :size => 10 %>
			</div>
		<% end %>
	
		<div class="buttons">
			<button class="positive" type="submit" id="save_theme_customization">Save Theme Options</button>
			<%= link_to 'Reset Options', reset_customization_admin_theme_path, :method => :put, :id => "reset_theme_customization" %>
		</div>
		
		<script type="text/javascript">
			$('.pick_color_key').addClass('styled');
			$('.pick_color').each(function(index){
				var wrapper = $(this).wrap('<div class="pick_color_wrapper"></div>'),
						widget = $('<div class="pick_color_widget"></div>').insertBefore(this),
						widgetColor = $('<div class="pick_color_widget_color"></div>').prependTo(widget),
						input = $(this),
						initialColor = input.val();
				
				input.hide();
				widgetColor.css('background-color', initialColor);
			 	widget.ColorPicker({
			 		color: initialColor,
			 		onChange: function(hsb, hex, rgb) {
			 			input.val('#' + hex);
			 			widgetColor.css('background-color', '#' + hex);
			 		},
			 		onSubmit: function(hsb, hex, rgb, el) {
			 			$(el).ColorPickerHide();
			 		}
			 	});
			});
		</script>
	<% end %>
<% end %>